<div class="h-[calc(100vh + 5rem)] flex flex-col justify-center">
    <h2 class="text-xl md:text-2xl font-bold mb-6" id="titulo_detalhes_venda">
        <i class="fa-solid fa-tags text-green-600"></i> Detalhes da Venda
    </h2>
    <div
        class="border bg-gray-50 dark:bg-gray-800 border-border dark:border-border-dark p-6 rounded-md shadow-md w-full h-full">
        <!-- Informações da Venda -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-2">
            <div>
                <p><span class="font-medium">ID da Venda:</span> <span id="id_venda_detalhes">...</span></p>
                <p><span class="font-medium">Data:</span> <span id="data_venda_detalhes">...</span></p>
                <p><span class="font-medium">Cliente:</span> <span id="cliente_venda_detalhes">...</span></p>
            </div>
            <div>
                <p><span class="font-medium">Total:</span> <span id="total_venda_detalhes">...</span></p>
                <p><span class="font-medium">Status:</span> <span id="status_venda_detalhes">...</span></p>
                <p><span class="font-medium">Garantia:</span> <span id="garantia_venda_detalhes">...</span></p>
            </div>
        </div>
        <hr class="border-border dark:border-border-dark mb-2">
        <!-- Itens Vendidos -->
        <h3 class="text-md font-medium mb-3">Itens Vendidos</h3>
        <div class="relative overflow-x-auto shadow-md sm:rounded-lg border border-border dark:border-border-dark">
            <table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
                <thead class="text-xs text-gray-700 uppercase bg-gray-200 dark:bg-gray-700 dark:text-gray-400">
                    <tr>
                        <th class="px-4 py-2 text-left">Produto</th>
                        <th class="px-4 py-2 text-right">Qtd</th>
                        <th class="px-4 py-2 text-right">Preço Unitário</th>
                        <th class="px-4 py-2 text-right">Subtotal</th>
                    </tr>
                </thead>
                <tbody id="listar_itens_venda">
                    <tr class="border-t border-border dark:border-border-dark">
                        <td colspan="4" class="px-4 py-2">Nenhum item encontrado</td>
                    </tr>
                </tbody>
                <tfoot class="text-gray-700 uppercase bg-gray-200 dark:bg-gray-700 dark:text-gray-200">
                    <tr class="border-t border-border dark:border-border-dark">
                        <td colspan="3" class="px-4 py-2 text-right font-medium text-md">Total</td>
                        <td class="px-4 py-2 text-right font-medium text-md" id="total_itens_venda_valor">...</td>
                    </tr>
                </tfoot>
            </table>
        </div>

        <div class="mt-6">
            <div class="flex justify-between">
                <div class="flex gap-2">
                    <button type="button" onclick="loadPage('vendas/resumo')"
                        class="text-sm hover:opacity-90 border flex justify-center items-center gap-2 border-gray-700 text-gray-900 bg-gray-100 dark:border-gray-500 dark:bg-gray-950 dark:text-gray-100 px-3 py-1.5 rounded-lg">
                        <i class="fa-solid fa-backward"></i>
                        <div class="hidden md:block">Voltar</div>
                    </button>
                    <button id="imprimir_cupom_venda"
                        class="text-sm hover:opacity-90 border flex justify-center items-center gap-2 border-orange-700 text-orange-900 bg-orange-100 dark:border-orange-500 dark:bg-orange-950 dark:text-orange-100 px-3 py-1.5 rounded-lg">
                        <i class="fa-solid fa-file-pdf"></i>
                        <div class="hidden md:block">Cupom N/F</div>
                    </button>
                    <button onclick="editarVenda(localStorage.getItem('vendaId'))"
                        class="text-sm hover:opacity-90 border flex justify-center items-center gap-2 border-green-700 text-green-900 bg-green-100 dark:border-green-500 dark:bg-green-950 dark:text-green-100 px-3 py-1.5 rounded-lg">
                        <i class="fa-solid fa-pen-to-square"></i>
                        <div class="hidden md:block">Editar</div>
                    </button>
                </div>
                <button onclick="excluirVenda(localStorage.getItem('vendaId'), true)"
                    class="text-sm hover:opacity-90 border flex justify-center items-center gap-2 border-red-700 text-red-900 bg-red-100 dark:border-red-500 dark:bg-red-950 dark:text-red-100 px-3 py-1.5 rounded-lg">
                    <i class="fa-solid fa-trash-can"></i>
                    <div class="hidden md:block">Excluir</div>
                </button>
            </div>
        </div>
    </div>
</div>
<nav
  class="fixed bottom-0 left-0 w-full bg-card dark:bg-card-dark border-t border-border dark:border-border-dark md:hidden flex justify-around pt-4 h-20 shadow-lg z-20">

  <button type="button" onclick="openSideBarMobile()"
    class="flex flex-col items-center disabled:text-gray-300 disabled:dark:text-gray-600 text-gray-700 dark:text-gray-300 cursor-pointer hover:text-primary transition">
    <i class="fa-solid fa-bars text-lg"></i>
    <span class="text-xs">Menu</span>
  </button>
</nav>


<script>
    // Configura QZ Tray para ignorar certificados (apenas para DEV)
    // qz.security.setCertificatePromise(() => Promise.resolve(null));
    // qz.security.setSignaturePromise(() => Promise.resolve(null));

    // Função principal de impressão
    async function imprimirCupom(texto) {
        if (!texto || typeof texto !== "string") {
            alert("Cupom vazio ou inválido.");
            return;
        }

        // Conecta ao QZ Tray, se necessário
        if (!qz.websocket.isActive()) {
            try {
                await qz.websocket.connect();
            } catch (err) {
                alert("Erro ao conectar ao QZ Tray");
                console.error(err);
                return;
            }
        }

        // Lista as impressoras disponíveis
        let impressoras;
        try {
            impressoras = await qz.printers.find();
            if (!impressoras.includes("Microsoft Print to PDF")) {
                alert("Impressora 'Microsoft Print to PDF' não encontrada.");
                console.warn("Impressoras disponíveis:", impressoras);
                return;
            }
        } catch (err) {
            console.error("Erro ao buscar impressoras:", err);
            return;
        }

        const config = qz.configs.create("Microsoft Print to PDF", {
            encoding: "UTF-8",
            margins: 0,
        });

        const data = [{ type: "raw", format: "plain", data: texto + "\n\n\n" }];

        return qz
            .print(config, data)
            .then(() => {
                alert("Cupom enviado para fila de impressão.");
            })
            .catch((err) => {
                console.error("Erro na impressão", err);
                alert("Erro ao imprimir cupom.");
            })
            .finally(() => {
                qz.websocket.disconnect();
            });
    }

    // Busca e imprime o cupom
    async function imprimirCupomPorVendaId(vendaId) {
        try {
            const resp = await fetch(`/api/vendas/cupom/${vendaId}`, {
                headers: {
                    Authorization: `Bearer ${localStorage.getItem("gestao_facil:token")}`,
                },
            });

            if (!resp.ok) {
                alert("Erro ao buscar o cupom");
                return;
            }

            const texto = await resp.text();

            if (!texto || texto.trim().length === 0) {
                alert("Cupom está vazio.");
                return;
            }

            await imprimirCupom("TESTE DE IMRPESSASON\n\n");
        } catch (err) {
            console.error("Erro ao buscar o cupom:", err);
            alert("Erro ao buscar ou imprimir o cupom.");
        }
    }
    async function gerarCupomPorVendaId(vendaId) {
        try {
            const resp = await fetch(`/api/vendas/cupom-pdf/${vendaId}`, {
                headers: {
                    Authorization: `Bearer ${localStorage.getItem("gestao_facil:token")}`,
                },
            });

            if (!resp.ok) {
                alert("Erro ao gerar o cupom");
                return;
            }

            const blob = await resp.blob();

            const url = window.URL.createObjectURL(blob);
            window.open(url, "_blank");
        } catch (err) {
            console.error("Erro ao gerar o cupom:", err);
            alert("Erro ao gerar o cupom.");
        }
    }

    (() => {
        $.ajax({
            url: '/api/vendas/' + localStorage.getItem("vendaId"),
            method: 'GET',
            dataType: 'json',
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('gestao_facil:token')}`
            },
            beforeSend: function (xhr) {
                Swal.fire({
                    title: "Carregando...",
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    showConfirmButton: false,
                    didOpen: () => {
                        Swal.showLoading();
                    },
                })
            },
            success: function (response) {
                Swal.close();
                const cliente = response.data.cliente ? response.data.cliente.nome : 'N/A'
                $("#titulo_detalhes_venda").html(`<i class="fa-solid fa-tags text-green-600"></i> Detalhes da Venda`);
                $("#id_venda_detalhes").text(`#${response.data.id}`);
                $("#imprimir_cupom_venda").click(() => gerarCupomPorVendaId(response.data.id));
                $("#cliente_venda_detalhes").text(`${cliente}`);
                $("#status_venda_detalhes").text(`${response.data.status}`);
                $("#garantia_venda_detalhes").text(`${response.data.garantia ? `${response.data.garantia} dias` : 'N/A'}`);
                $("#total_venda_detalhes").text(`R$ ${response.data.valor.replace('.', ',')}`);
                $("#data_venda_detalhes").text(`${new Date(response.data.data).toLocaleDateString('pt-BR')}`);

                $("#listar_itens_venda").empty();
                response.data.ItensVendas.map(item => {
                    $("#listar_itens_venda").append(`
                        <tr class="border-t text-gray-800 dark:text-gray-200 border-border dark:border-border-dark">
                            <td class="px-4 py-2">${item.produto.nome}</td>
                            <td class="px-4 py-2 text-right">${item.quantidade}</td>
                            <td class="px-4 py-2 text-right">R$ ${item.valor.replace('.', ',')}</td>
                            <td class="px-4 py-2 text-right">R$ ${(parseFloat(item.valor) * item.quantidade).toFixed(2).replace('.', ',')}</td>
                        </tr>
                    `);
                });

                if (response.data.desconto) {
                    $("#listar_itens_venda").append(`
                        <tr class="border-t text-gray-800 dark:text-gray-200 border-border dark:border-border-dark bg-gray-100 dark:bg-gray-800">
                            <td colspan="3" class="px-4 py-2 text-right">Desconto</td>
                            <td class="px-4 py-2 text-right">R$ ${parseFloat(response.data.desconto).toFixed(2).replace('.', ',')}</td>
                        </tr>
                    `);
                }

                $("#total_itens_venda_valor").text(`R$ ${parseFloat(response.data.valor).toFixed(2).replace('.', ',')}`);
            },
            error: function (xhr, status, error) {
                console.log(error);
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Ocorreu um erro ao carregar os dados da venda.',
                }).then((result) => {
                    loadPage('/vendas/resumo');
                });
            }
        });
    })();
</script>