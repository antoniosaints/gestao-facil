generator client {
  provider = "prisma-client-js"
  output   = "../generated"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  ATIVO
  INATIVO
  BLOQUEADO
}

model Subscription {
  id        Int      @id @default(autoincrement())
  userId    Int
  Usuarios  Usuarios @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  endpoint  String   @db.Text
  p256dh    String
  auth      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum StatusFatura {
  PENDENTE
  PAGO
  ATRASADO
  CANCELADO
}

model FaturasContas {
  id             Int          @id @default(autoincrement())
  contaId        Int
  conta          Contas       @relation(fields: [contaId], references: [id])
  asaasPaymentId String       @unique
  vencimento     DateTime
  valor          Float
  urlPagamento   String
  status         StatusFatura @default(PENDENTE)
  criadoEm       DateTime     @default(now())
}

model Contas {
  id                   Int                    @id @default(autoincrement())
  nome                 String
  valor                Decimal                @db.Decimal(10, 2)
  data                 DateTime
  status               Status                 @default(ATIVO)
  vencimento           DateTime               @default(now())
  tipo                 String?
  categoria            String?
  email                String
  asaasCustomerId      String
  asaasSubscriptionId  String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  Produto              Produto[]
  Clientes             ClientesFornecedores[]
  Vendas               Vendas[]
  MovimentacoesEstoque MovimentacoesEstoque[]
  Usuarios             Usuarios[]
  FaturasContas        FaturasContas[]
}

model Usuarios {
  id            Int            @id @default(autoincrement())
  contaId       Int
  Contas        Contas         @relation(fields: [contaId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  nome          String
  email         String
  senha         String
  pushReceiver  Boolean?       @default(true)
  emailReceiver Boolean?       @default(true)
  status        Status         @default(ATIVO)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Subscription  Subscription[]
  Vendas        Vendas[]
}

enum TipoCliente {
  FORNECEDOR
  CLIENTE
}

model ClientesFornecedores {
  id                   Int                    @id @default(autoincrement())
  contaId              Int
  Contas               Contas                 @relation(fields: [contaId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  status               Status                 @default(ATIVO)
  nome                 String
  email                String?
  telefone             String?
  tipo                 TipoCliente            @default(CLIENTE)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  Vendas               Vendas[]
  MovimentacoesEstoque MovimentacoesEstoque[]
}

enum TipoMovimentacao {
  ENTRADA
  SAIDA
  DESCARTE
  TRANSFERENCIA
}

enum StatusMovimentacao {
  PENDENTE
  CONCLUIDO
  CANCELADO
}

model MovimentacoesEstoque {
  id                Int                   @id @default(autoincrement())
  contaId           Int
  Contas            Contas                @relation(fields: [contaId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  tipo              TipoMovimentacao      @default(ENTRADA)
  data              DateTime              @default(now())
  notaFiscal        String?
  frete             Decimal?              @db.Decimal(10, 2)
  desconto          Decimal?              @db.Decimal(10, 2)
  status            StatusMovimentacao    @default(PENDENTE)
  clienteFornecedor Int?
  ClienteFornecedor ClientesFornecedores? @relation(fields: [clienteFornecedor], references: [id])
  produtoId         Int
  Produto           Produto               @relation(fields: [produtoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  quantidade        Int
  custo             Decimal               @db.Decimal(10, 2)
}

model Produto {
  id                   Int                    @id @default(autoincrement())
  contaId              Int
  Contas               Contas                 @relation(fields: [contaId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  status               Status                 @default(ATIVO)
  nome                 String
  descricao            String?
  preco                Decimal                @db.Decimal(10, 2)
  precoCompra          Decimal?               @db.Decimal(10, 2)
  entradas             Boolean?               @default(true)
  saidas               Boolean?               @default(true)
  unidade              String?
  estoque              Int
  minimo               Int
  codigo               String?
  ItensVendas          ItensVendas[]
  MovimentacoesEstoque MovimentacoesEstoque[]
}

enum StatusVenda {
  ORCAMENTO
  FATURADO
  ANDAMENTO
  FINALIZADO
  PENDENTE
  CANCELADO
}

model Vendas {
  id              Int                   @id @default(autoincrement())
  contaId         Int
  Contas          Contas                @relation(fields: [contaId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  data            DateTime              @default(now())
  valor           Decimal               @db.Decimal(10, 2)
  clienteId       Int?
  status          StatusVenda           @default(ORCAMENTO)
  cliente         ClientesFornecedores? @relation(fields: [clienteId], references: [id])
  vendedorId      Int?
  vendedor        Usuarios?             @relation(fields: [vendedorId], references: [id])
  garantia        Int?                  @default(0)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  ItensVendas     ItensVendas[]
  PagamentoVendas PagamentoVendas?
}

model ItensVendas {
  id         Int      @id @default(autoincrement())
  vendaId    Int
  venda      Vendas   @relation(fields: [vendaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  produtoId  Int
  produto    Produto  @relation(fields: [produtoId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  quantidade Int
  valor      Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum StatusPagamento {
  PENDENTE
  EFETIVADO
  ESTORNADO
  CANCELADO
}

enum MetodoPagamento {
  PIX
  DINHEIRO
  CARTAO
  BOLETO
  TRANSFERENCIA
  CHEQUE
  CREDITO
  DEBITO
  GATEWAY
  OUTRO
}

model PagamentoVendas {
  id      Int             @id @default(autoincrement())
  venda   Vendas          @relation(fields: [vendaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  vendaId Int             @unique
  metodo  MetodoPagamento @default(PIX)
  valor   Decimal         @db.Decimal(10, 2)
  data    DateTime?
  status  StatusPagamento @default(PENDENTE)
}
