generator client {
  provider = "prisma-client-js"
  output   = "../generated"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  ATIVO
  INATIVO
  BLOQUEADO
}

model Subscription {
  id        Int      @id @default(autoincrement())
  userId    Int
  Usuarios  Usuarios @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  endpoint  String   @db.Text
  p256dh    String
  auth      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum StatusFatura {
  PENDENTE
  PAGO
  ATRASADO
  CANCELADO
}

model FaturasContas {
  id             Int          @id @default(autoincrement())
  contaId        Int
  conta          Contas       @relation(fields: [contaId], references: [id])
  Uid            String       @default("INV_000")
  asaasPaymentId String       @unique
  vencimento     DateTime
  valor          Float
  urlPagamento   String
  status         StatusFatura @default(PENDENTE)
  criadoEm       DateTime     @default(now())
}

enum GatewayConta {
  mercadopago
  asaass
}

model Contas {
  id                   Int                    @id @default(autoincrement())
  nome                 String
  valor                Decimal                @db.Decimal(10, 2)
  data                 DateTime
  profile              String?                @default("imgs/logo.png")
  status               Status                 @default(ATIVO)
  vencimento           DateTime               @default(now())
  tipo                 String?
  documento            String?
  funcionarios         Int                    @default(0)
  categoria            String?
  gateway              GatewayConta           @default(mercadopago)
  email                String
  telefone             String?
  asaasCustomerId      String
  asaasSubscriptionId  String?
  dicasNovidades       Boolean?               @default(false)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  Produto              Produto[]
  Clientes             ClientesFornecedores[]
  Vendas               Vendas[]
  MovimentacoesEstoque MovimentacoesEstoque[]
  Usuarios             Usuarios[]
  FaturasContas        FaturasContas[]
  ContasFinanceiro     ContasFinanceiro[]
  CategoriaFinanceiro  CategoriaFinanceiro[]
  LancamentoFinanceiro LancamentoFinanceiro[]
  Servicos             Servicos[]
  OrdensServico        OrdensServico[]
}

model Usuarios {
  id            Int              @id @default(autoincrement())
  contaId       Int
  Contas        Contas           @relation(fields: [contaId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  nome          String
  email         String           @unique
  senha         String
  superAdmin    Boolean          @default(false)
  gerencialMode Boolean          @default(false)
  permissao     PermissaoUsuario @default(usuario)
  pushReceiver  Boolean?         @default(true)
  emailReceiver Boolean?         @default(true)
  status        Status           @default(ATIVO)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  Subscription  Subscription[]
  Vendas        Vendas[]
}

enum PermissaoUsuario {
  root
  admin
  gerente
  vendedor
  tecnico
  usuario
}

enum TipoCliente {
  FORNECEDOR
  CLIENTE
}

model ClientesFornecedores {
  id                   Int                    @id @default(autoincrement())
  contaId              Int
  Contas               Contas                 @relation(fields: [contaId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  Uid                  String                 @default("CLI_000")
  status               Status                 @default(ATIVO)
  documento            String?
  endereco             String?
  cep                  String?
  cidade               String?
  estado               String?
  nome                 String
  email                String?
  telefone             String?
  whastapp             String?
  observacaos          String?
  tipo                 TipoCliente            @default(CLIENTE)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  Vendas               Vendas[]
  MovimentacoesEstoque MovimentacoesEstoque[]
  LancamentoFinanceiro LancamentoFinanceiro[]
  Assinatura           Assinatura[]
}

enum TipoMovimentacao {
  ENTRADA
  SAIDA
  DESCARTE
  TRANSFERENCIA
}

enum StatusMovimentacao {
  PENDENTE
  CONCLUIDO
  CANCELADO
}

model MovimentacoesEstoque {
  id                Int                   @id @default(autoincrement())
  contaId           Int
  Contas            Contas                @relation(fields: [contaId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  Uid               String                @default("MOV_000")
  tipo              TipoMovimentacao      @default(ENTRADA)
  vendaId           Int?
  Vendas            Vendas?               @relation(fields: [vendaId], references: [id], onDelete: Cascade)
  data              DateTime              @default(now())
  notaFiscal        String?
  frete             Decimal?              @db.Decimal(10, 2)
  desconto          Decimal?              @db.Decimal(10, 2)
  status            StatusMovimentacao    @default(PENDENTE)
  clienteFornecedor Int?
  ClienteFornecedor ClientesFornecedores? @relation(fields: [clienteFornecedor], references: [id])
  produtoId         Int
  Produto           Produto               @relation(fields: [produtoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  quantidade        Int
  custo             Decimal               @db.Decimal(10, 2)
}

model Produto {
  id                   Int                    @id @default(autoincrement())
  contaId              Int
  Contas               Contas                 @relation(fields: [contaId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  Uid                  String                 @default("PRO_000")
  status               Status                 @default(ATIVO)
  nome                 String
  descricao            String?
  preco                Decimal                @db.Decimal(10, 2)
  precoCompra          Decimal?               @db.Decimal(10, 2)
  entradas             Boolean?               @default(true)
  saidas               Boolean?               @default(true)
  unidade              String?
  estoque              Int
  minimo               Int
  codigo               String?
  ItensVendas          ItensVendas[]
  MovimentacoesEstoque MovimentacoesEstoque[]
  ItensOrdensServico   ItensOrdensServico[]
}

model Servicos {
  id                 Int                  @id @default(autoincrement())
  contaId            Int
  Contas             Contas               @relation(fields: [contaId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  Uid                String               @default("SER_000")
  nome               String
  preco              Decimal              @db.Decimal(10, 2)
  status             Boolean              @default(true)
  descricao          String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  Assinatura         Assinatura[]
  ItensOrdensServico ItensOrdensServico[]
}

enum StatusOrdemServico {
  ABERTA
  ORCAMENTO
  APROVADA
  ANDAMENTO
  FATURADA
  CANCELADA
}

model OrdensServico {
  id                 Int                  @id @default(autoincrement())
  contaId            Int
  Contas             Contas               @relation(fields: [contaId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  Uid                String               @default("OS_000")
  descricao          String?
  descricaoCliente   String?
  status             StatusOrdemServico   @default(ABERTA)
  garantia           String
  desconto           Decimal              @default(0) @db.Decimal(10, 2)
  data               DateTime             @default(now())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  ItensOrdensServico ItensOrdensServico[]
}

enum TipoItemOrdemServico {
  SERVICO
  PRODUTO
}

model ItensOrdensServico {
  id         Int                  @id @default(autoincrement())
  itemName   String
  tipo       TipoItemOrdemServico
  ordemId    Int
  ordem      OrdensServico        @relation(fields: [ordemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  produtoId  Int?
  produto    Produto?             @relation(fields: [produtoId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  servicoId  Int?
  servico    Servicos?            @relation(fields: [servicoId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  quantidade Int
  valor      Decimal              @db.Decimal(10, 2)
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
}

enum AssinaturaInternaStatus {
  ATIVA
  CANCELADA
  SUSPENSA
}

enum AssinaturaInternaRecorrencia {
  MENSAL
  BIMESTRAL
  TRIMESTRAL
  ANUAL
}

model Assinatura {
  id              Int                          @id @default(autoincrement())
  clienteId       Int
  servicoId       Int
  inicio          DateTime
  fim             DateTime?
  status          AssinaturaInternaStatus      @default(ATIVA)
  recorrencia     AssinaturaInternaRecorrencia @default(MENSAL)
  proximaCobranca DateTime
  createdAt       DateTime                     @default(now())
  updatedAt       DateTime                     @updatedAt
  cliente         ClientesFornecedores         @relation(fields: [clienteId], references: [id])
  servico         Servicos                     @relation(fields: [servicoId], references: [id])
  cobrancas       Cobranca[]
}

model Cobranca {
  id            Int        @id @default(autoincrement())
  assinaturaId  Int
  vencimento    DateTime
  pago          Boolean    @default(false)
  valor         Decimal    @db.Decimal(10, 2)
  dataPagamento DateTime?
  assinatura    Assinatura @relation(fields: [assinaturaId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

enum StatusVenda {
  ORCAMENTO
  FATURADO
  ANDAMENTO
  FINALIZADO
  PENDENTE
  CANCELADO
}

model Vendas {
  id                   Int                    @id @default(autoincrement())
  contaId              Int
  Contas               Contas                 @relation(fields: [contaId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  Uid                  String                 @default("VEN_000")
  data                 DateTime               @default(now())
  valor                Decimal                @db.Decimal(10, 2)
  clienteId            Int?
  status               StatusVenda            @default(ORCAMENTO)
  cliente              ClientesFornecedores?  @relation(fields: [clienteId], references: [id])
  vendedorId           Int?
  vendedor             Usuarios?              @relation(fields: [vendedorId], references: [id])
  garantia             Int?                   @default(0)
  faturado             Boolean                @default(false)
  observacoes          String?                @db.Text
  desconto             Decimal                @default(0) @db.Decimal(10, 2)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  ItensVendas          ItensVendas[]
  PagamentoVendas      PagamentoVendas?
  MovimentacoesEstoque MovimentacoesEstoque[]
  LancamentoFinanceiro LancamentoFinanceiro[]
}

model ItensVendas {
  id         Int      @id @default(autoincrement())
  vendaId    Int
  venda      Vendas   @relation(fields: [vendaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  produtoId  Int
  produto    Produto  @relation(fields: [produtoId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  quantidade Int
  valor      Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum StatusPagamento {
  PENDENTE
  EFETIVADO
  ESTORNADO
  CANCELADO
}

enum MetodoPagamento {
  PIX
  DINHEIRO
  CARTAO
  BOLETO
  TRANSFERENCIA
  CHEQUE
  CREDITO
  DEBITO
  GATEWAY
  OUTRO
}

model PagamentoVendas {
  id      Int             @id @default(autoincrement())
  venda   Vendas          @relation(fields: [vendaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  vendaId Int             @unique
  metodo  MetodoPagamento @default(PIX)
  valor   Decimal         @db.Decimal(10, 2)
  data    DateTime?
  status  StatusPagamento @default(PENDENTE)
}

model ContasFinanceiro {
  id           Int                    @id @default(autoincrement())
  contaId      Int
  Contas       Contas                 @relation(fields: [contaId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  Uid          String                 @default("CON_000")
  nome         String
  saldoInicial Decimal                @default(0)
  lancamentos  LancamentoFinanceiro[]
  createdAt    DateTime               @default(now())
}

model CategoriaFinanceiro {
  id                  Int                    @id @default(autoincrement())
  contaId             Int
  Contas              Contas                 @relation(fields: [contaId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  Uid                 String                 @default("CAT_000")
  nome                String
  parentId            Int?
  Parent              CategoriaFinanceiro?   @relation("Subcategorias", fields: [parentId], references: [id])
  lancamentos         LancamentoFinanceiro[]
  createdAt           DateTime               @default(now())
  CategoriaFinanceiro CategoriaFinanceiro[]  @relation("Subcategorias")
}

model LancamentoFinanceiro {
  id                 Int                       @id @default(autoincrement())
  contaId            Int
  Contas             Contas                    @relation(fields: [contaId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  Uid                String                    @default("FIN_000")
  descricao          String
  valorTotal         Decimal                   @default(0) // total com desconto incluído
  valorBruto         Decimal                   @default(0)
  valorEntrada       Decimal                   @default(0)
  desconto           Decimal                   @default(0)
  tipo               TipoLancamentoFinanceiro
  formaPagamento     MetodoPagamento
  status             StatusPagamentoFinanceiro
  recorrente         Boolean                   @default(false)
  dataLancamento     DateTime
  dataEntrada        DateTime?
  clienteId          Int?
  cliente            ClientesFornecedores?     @relation(fields: [clienteId], references: [id])
  categoriaId        Int
  categoria          CategoriaFinanceiro       @relation(fields: [categoriaId], references: [id])
  vendaId            Int?
  venda              Vendas?                   @relation(fields: [vendaId], references: [id], onDelete: Restrict)
  parcelas           ParcelaFinanceiro[]
  createdAt          DateTime                  @default(now())
  ContasFinanceiro   ContasFinanceiro?         @relation(fields: [contasFinanceiroId], references: [id])
  contasFinanceiroId Int?
}

model ParcelaFinanceiro {
  id             Int                  @id @default(autoincrement())
  numero         Int
  Uid            String               @default("PAR_000")
  valor          Decimal
  vencimento     DateTime
  pago           Boolean              @default(false)
  valorPago      Decimal?
  formaPagamento MetodoPagamento?
  dataPagamento  DateTime?
  lancamentoId   Int
  lancamento     LancamentoFinanceiro @relation(fields: [lancamentoId], references: [id], onDelete: Cascade)

  @@index([lancamentoId, id])
}

enum TipoLancamentoFinanceiro {
  RECEITA
  DESPESA
}

enum StatusPagamentoFinanceiro {
  PENDENTE
  PAGO
  ATRASADO
  PARCIAL
}
